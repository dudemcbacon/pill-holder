# These substitutions allow the end user to override certain values
substitutions:
  name: "pill-holder"
  left_led_pin: "4"
  middle_led_pin: "17"
  right_led_pin: "5"
  right_button_pin: "0"
  middle_button_pin: "1"
  left_button_pin: "2"
  led_shutoff_delay: "10 sec"

esphome:
  name: "${name}"
  # Automatically add the mac address to the name
  # so you can use a single firmware for all devices
  name_add_mac_suffix: false

  # This will allow for (future) project identification,
  # configuration and updates.
  project:
    name: esphome.project-template
    version: "1.0"

esp32:
  board: esp32doit-devkit-v1
  framework:
    type: arduino

# To be able to get logs from the device via serial and api.
logger:

# API is a requirement of the dashboard import.
api:

# OTA is required for Over-the-Air updating
ota:

# This should point to the public location of this yaml file.
dashboard_import:
  package_import_url: github://dudemcbacon/pill-holder/project-template-esp32.yaml@main

wifi:
  # Set up a wifi access point using the device name above
  ap:
    password: "12345678"

# In combination with the `ap` this allows the user
# to provision wifi credentials to the device.
captive_portal:

##########################################################
# Most projects should not remove anything from above here
# and should just modify the name, project name/version
# and git url for the dashboard_import
##########################################################


# Sets up Bluetooth LE (Only on ESP32) to allow the user
# to provision wifi credentials to the device.
esp32_improv:
  authorizer: none

# Sets up the improv via serial client for Wi-Fi provisioning.
# Handy if your device has a usb port for the user to add credentials when they first get it.
improv_serial:

script:
  - id: update_left_status_led
    mode: restart     # Light will be kept on during 1 minute since
                      # the latest time the script is executed
    then:
      - light.turn_on: left_led
      - delay: ${led_shutoff_delay}
      - light.turn_off: left_led
  - id: update_middle_status_led
    mode: restart     # Light will be kept on during 1 minute since
                      # the latest time the script is executed
    then:
      - light.turn_on: middle_led
      - delay: ${led_shutoff_delay}
      - light.turn_off: middle_led
  - id: update_right_status_led
    mode: restart     # Light will be kept on during 1 minute since
                      # the latest time the script is executed
    then:
      - light.turn_on: right_led
      - delay: ${led_shutoff_delay}
      - light.turn_off: right_led

light:
  - platform: status_led
    id: left_led
    name: left_led
    pin:
      number: ${left_led_pin}
  - platform: status_led
    id: middle_led
    name: middle_led
    pin:
      number: ${middle_led_pin}
  - platform: status_led
    id: right_led
    name: right_led
    pin:
      number: ${right_led_pin}

binary_sensor:
  - platform: gpio
    id: left_button
    pin:
      number: ${left_button_pin}
      mode:
        input: true
        pullup: true
    name: left_button
    on_press:
      then:
        - script.execute: update_left_status_led
  - platform: gpio
    id: middle_button
    pin:
      number: ${middle_button_pin}
      mode:
        input: true
        pullup: true
    name: middle_button
    on_press:
      then:
        - script.execute: update_middle_status_led
  - platform: gpio
    id: right_button
    pin:
      number: ${right_button_pin}
      mode:
        input: true
        pullup: true
    name: right_button
    on_press:
      then:
        - script.execute: update_right_status_led
